// The sequence of triangle numbers is generated by adding the natural numbers. 
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
// The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

// Output: We need a number that is divisible by over 500 different numbers. 

function triangleDivisors() {

   // TriangleNumber = n(n+1)/2
   // n = number of triangle numbers


   let found = false;
   let result;
   let i = 10000;

   while (!found) {

      console.log(i);

      var numberOfDivisors = 0;
      let testNumber = triangleNumber(i);

      for (let j = 2; j <= testNumber; ++j) {
         if (testNumber % j === 0) {
            ++numberOfDivisors;
         }
      }

      if (numberOfDivisors > 500) {
         found = true;
         result = i;
      }
      i++;
   }

   return result;
}


// We create Tirangle numbers with function to test. 
function triangleNumber(number) {
   let triNumber = (number * (number + 1) / 2)
   return triNumber;
}

console.log(triangleNumber(12375));
// console.log(triangleDivisors());